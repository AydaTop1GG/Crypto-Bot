import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import token
import handlers as h


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –í—Å–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è –∑–¥–µ—Å—å
wallet_guide = "‚è±–ó–∞–π–º—ë—Ç –Ω–µ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç\n\n\
    üî∏*Binance* - –°–∞–π—Ç Binance ==> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API ==> –°–æ–∑–¥–∞—Ç—å API ==> –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–æ–π ==> ... –ø–æ—Ç–æ–º –¥–æ–ø–∏—à—É \n\
        üéÆ–î–∞–ª–µ–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω–æ–º—É –±–æ—Ç—É */bncwallet* _–í–∞—à API –ö–ª—é—á_\n\n\
    üîπ*Yobit* - –°–∞–π—Ç Yobit ==> –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è ==> API –ö–ª—é—á–∏ ==> info & trade & deposits & withdrawals ==> \
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á ==> –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–ª—é—á ==> –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ö–ª—é—á \n\
        üéÆ–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω–æ–º—É –±–æ—Ç—É */yobtwallet* _–í–∞—à API –ö–ª—é—á_"
        
binance_wallet = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ‚ùå"
yobit_wallet = "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ‚ùå"
main_info = "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–Ω—Ñ–∞, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å"
wallet_info = f"Binance: {binance_wallet}\nYobit: {yobit_wallet}\n\n–ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª—ë–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /wallet"




############################


#from aiogram import Bot, Dispatcher, executor, types
#from aiogram.contrib.fsm_storage.memory import MemoryStorage
#from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
#from aiogram.utils.callback_data import CallbackData

#import config


# dun_w —ç—Ç–æ –ø—Ä–µ—Ñ–∏–∫—Å, –µ–≥–æ –º–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º text_startswith=...
#cd_walk = CallbackData("dun_w", "action", "floor")


#@dp.message_handler(commands=['start'])
#async def start(message: types.Message):
    
#    markup = InlineKeyboardMarkup(row_width=2).add(
#        InlineKeyboardButton(f"–ù–∞–ª–µ–≤–æ",
#                             callback_data=cd_walk.new(
#                                 action='1',
#                                 floor=2
#                             )),
#        InlineKeyboardButton(f"–ù–∞–ø—Ä–∞–≤–æ",
#                             callback_data=cd_walk.new(
#                                 action='2',
#                                 floor=2
#                             ))
#    )
#    await message.answer("text", reply_markup=markup)
#
#
#@dp.callback_query_handler(cd_walk.filter())
#async def button_press(call: types.CallbackQuery, callback_data: dict):
#    action = callback_data.get('action')  # 1 or 2
#    floor = callback_data.get('floor')  # 2



#####################





# –õ–æ–≤–∏–º —Å–∏–≥–Ω–∞–ª—ã callback_data –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    
    code = callback_query.data   # callback_data –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç
    
    if code == 'Flow':
        await bot.answer_callback_query(callback_query.id, # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –±—É–¥–µ—Ç –¥–æ–ª–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
            text='–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
    
    elif code == 'Wallet':

        await callback_query.message.edit_text(wallet_info, reply_markup=h.wallet_menu)
        #await bot.answer_callback_query(callback_query.id,text='–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
    
    elif code == 'Questions':
        await bot.answer_callback_query(callback_query.id,
            text='–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
    
    elif code == 'back':
        #await bot.answer_callback_query(callback_query.id,text='–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
        #await bot.send_message(message.from_user.id, main_info, reply_markup=h.main_menu)
        await callback_query.message.edit_text(main_info, reply_markup=h.main_menu)
       

    else:
        await bot.answer_callback_query(callback_query.id)
    
    #await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAEFNLBixZumUmBmcAT3H2SmnCrPGRMyXAACaRcAAqnJOUoBu84B21ly6ikE')
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –∑–∞—Ä—è–∂–µ–Ω–Ω—ã–π –±–æ—Ç!")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(message.from_user.id, main_info, reply_markup=h.main_menu)


@dp.message_handler(commands=['wallet'])
async def wallet_command(message: types.Message):

    await bot.send_message(message.from_user.id, wallet_guide, reply_markup=h.wallet_menu, parse_mode="Markdown")


# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ Binance
@dp.message_handler(commands=['bncwallet'])
async def wallet_command(message: types.Message):

    await bot.send_message(message.from_user.id, wallet_guide, reply_markup=h.wallet_menu, parse_mode="Markdown")


# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ Yobit
@dp.message_handler(commands=['yobtwallet'])
async def wallet_command(message: types.Message):

    await bot.send_message(message.from_user.id, wallet_guide, reply_markup=h.wallet_menu, parse_mode="Markdown")





# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)